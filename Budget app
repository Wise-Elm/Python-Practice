class Category:

    def __init__(self, category):
        # able to instantiate objects based on different budget categories like *food*, *clothing*, and *entertainment*

        self.category = category
        self.ledger = []
        self.balance = 0

    def deposit(self, amount, description=None):
        # A `deposit` method that accepts an amount and description. If no description is given, it should default
        # to an empty string. The method should append an object to the ledger list in
        # the form of `{"amount": amount, "description": description}`

        self.amount = amount
        self.description = description

        x = {}

        if description:
            x["amount"] = amount
            x["description"] = description
        else:
            x["amount"] = amount
        self.ledger.append(x)
        self.balance += amount

        # print(self.ledger)

    def withdraw(self, amount, description=None):
        # A `withdraw` method that is similar to the `deposit` method, but the amount passed in should be
        # stored in the ledger as a negative number. If there are not enough funds,
        # nothing should be added to the ledger. This method should
        # return `True` if the withdrawal took place, and `False` otherwise.

        self.amount = amount
        self.description = description

        if not self.check_funds(amount):
            return False
        else:
            if amount > 0:
                amount -= amount * 2
            x = {}
            if description:
                x["amount"] = amount
                x["description"] = description
            else:
                x["amount"] = amount
            self.ledger.append(x)
            self.balance += amount
            # print(self.ledger)
            return True

    def get_balance(self):
        # returns the current balance of the budget category based on the deposits and withdrawals that have occurred.

        # print(self.balance)
        return self.balance

    def transfer(self, amount, category):
        # Accepts an amount and another budget category as arguments.
        # The method should add a withdrawal with the amount and a
        # description. The method should then add a deposit to the other
        # budget category with the amount and a description.
        # If there are not enough funds, nothing should be added to either ledgers.

        if self.check_funds(amount):
            self.withdraw(amount, f'Transfer to {category.category}')
            x = category
            x.deposit(amount, f'Transfer from {self.category}')

            return True
        else:
            return False

    def check_funds(self, amount):
        # Accepts an amount as an argument. Returns `False` if the amount is greater
        # than the balance of the budget category and returns `True` otherwise. This method can be used by
        # both the `withdraw` method and `transfer` method.

        if amount > self.balance:
            return False
        else:
            return True

    def __str__(self):
        # Prints object in nice looking format

        dict = {}

        title_line = ('*' * ((30 - len(self.category)) // 2)) + self.category + \
                     ('*' * ((30 - len(self.category)) // 2)) + '\n'
        body_lines = ''
        footer_line = f'Total: {self.balance}'

        # arranging items in self.ledger
        for x in self.ledger:
            list = []
            for v in x.values():
                list.append(v)
            dict[list[1]] = list[0]

        # arranging transaction list
        for k, v in dict.items():
            line = k[:23].ljust(23) + "{:.2f}".format(v).rjust(7)
            body_lines += line + "\n"

        chart = title_line + body_lines + footer_line

        return chart




food = Category("Food")
food.deposit(1000, "initial deposit")
food.withdraw(10.15, "groceries")
food.withdraw(15.89, "restaurant and more food for dessert")
# print(food.get_balance())
clothing = Category("Clothing")
clothing.deposit(1500, "initial deposit")
food.transfer(50, clothing)
clothing.withdraw(25.55)
clothing.withdraw(100)
auto = Category("Auto")
auto.deposit(1000, "initial deposit")
auto.withdraw(15)

#print(food)
print(clothing)
