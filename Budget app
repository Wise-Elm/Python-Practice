class Category:

    def __init__(self, category):
        # able to instantiate objects based on different budget categories like *food*, *clothing*, and *entertainment*

        self.category = category
        self.ledger = []
        self.balance = 0

    def deposit(self, amount, description=''):
        # A `deposit` method that accepts an amount and description. If no description is given, it should default
        # to an empty string. The method should append an object to the ledger list in
        # the form of `{"amount": amount, "description": description}`

        self.amount = amount
        self.description = description

        x = {}
        x["amount"] = amount
        x["description"] = description

        self.ledger.append(x)
        self.balance += amount

        # print(self.ledger)

    def withdraw(self, amount, description=''):
        # A `withdraw` method that is similar to the `deposit` method, but the amount passed in should be
        # stored in the ledger as a negative number. If there are not enough funds,
        # nothing should be added to the ledger. This method should
        # return `True` if the withdrawal took place, and `False` otherwise.

        self.amount = amount
        self.description = description

        if not self.check_funds(amount):
            return False
        else:
            if amount > 0:
                amount -= amount * 2
            x = {"amount": amount, "description": description}

            self.ledger.append(x)
            self.balance += amount
            return True

    def get_balance(self):
        # returns the current balance of the budget category based on the deposits and withdrawals that have occurred.

        # print(self.balance)
        return self.balance

    def transfer(self, amount, category):
        # Accepts an amount and another budget category as arguments.
        # The method should add a withdrawal with the amount and a
        # description. The method should then add a deposit to the other
        # budget category with the amount and a description.
        # If there are not enough funds, nothing should be added to either ledgers.

        if self.check_funds(amount):
            self.withdraw(amount, f'Transfer to {category.category}')
            x = category
            x.deposit(amount, f'Transfer from {self.category}')

            return True
        else:
            return False

    def check_funds(self, amount):
        # Accepts an amount as an argument. Returns `False` if the amount is greater
        # than the balance of the budget category and returns `True` otherwise. This method can be used by
        # both the `withdraw` method and `transfer` method.

        if amount > self.balance:
            return False
        else:
            return True

    def __str__(self):
        # Prints object in nice looking format

        title_line = ('*' * ((30 - len(self.category)) // 2)) + self.category + \
                     ('*' * ((30 - len(self.category)) // 2)) + '\n'
        body_lines = ''
        footer_line = f'Total: {self.balance}'

        # Arranging chart body
        for x in self.ledger:
            list = []
            for k, v in x.items():
                list.append(v)
            line = list[1][:23].ljust(23) + "{:.2f}".format(list[0]).rjust(7)
            body_lines += line + '\n'

        chart = title_line + body_lines + footer_line

        return chart


def create_spend_chart(categories):
    # takes a list of spending Categories and return a string that is a spending bar chart

    title = 'Percentage spent by category'  # title line
    body = ''
    y_axis = '    '+ ('-' * (3 * len(categories)) + '-')  # base line
    labels = ''

    graph = ''
    graph += title + '\n'
    x = 100  # max percentage
    percent_dictionary = percentage(categories)

    while x >= 0:
        graph += (str(x) + '|').rjust(4)
        for k, v in percent_dictionary.items():
            if float(v) >= x:
                graph += ' o '
            else:
                graph += '   '

        graph += ' ' + '\n'
        x -= 10

    graph += y_axis

    n_list = name_list(percent_dictionary)  # list of the category names
    n_length = name_length(n_list)  # maximum category name length

    # labels the bar graph with the category names
    graph += '\n    '
    row = 0
    while row < n_length:
        for x in n_list:
            try:
                graph += f' {x[row]} '
            except:
                graph += '   '
        graph += ' ' + '\n'
        graph += '    '
        row += 1

    # clean the end of the string
    graph = graph.rstrip()
    graph += '  '

    return graph


def name_list(percent_dictionary):
    name_list = []  # makes a list of the category names
    for k, v in percent_dictionary.items():
        name_list.append(k)
    return name_list


def name_length(n_list):
    max = 0  # finds maximum category name length
    for x in n_list:
        x_len = len(x)
        if x_len > max:
            max = x_len
    return max


def percentage(categories):
    # Finds percentages for create_spend_chart()
    list = []  # list of all withdraws for all categories
    c_withdraw_totals = []  # sums for each category

    for i in categories:
        withdraw_amounts = []  # for each category
        for x in i.ledger:
            if x["amount"] < 0:
                withdraw_amounts.append(x["amount"])
                list.append(x["amount"])
        c_withdraw_totals.append(sum(withdraw_amounts))

    c_withdraw_totals = [float(i) for i in c_withdraw_totals]  # convert to float
    list = [float(i) for i in list]  # convert to float

    # finds total of list[] to calculate the average
    total = sum(list)
    total = "{:.2f}".format(total)
    total = float(total)

    # calculates averages for amounts spent in each category out of the total amount spent across all categories
    list_of_averages = []
    for i in c_withdraw_totals:
        p = (i/total) * 100
        p = "{:.2f}".format(p)
        list_of_averages.append(p)
    averages = category_w_averages(categories, list_of_averages)
    return averages  # returns a dictionary of averages for each category

def category_w_averages(categories, list_of_averages):
    # binds each category with its average amount of spending into a list of dictionaries

    # converting categories list to a list of strings
    c_list = []
    for x in categories:
        c_list.append(x.category)

    dictionary = dict(zip(c_list, list_of_averages))

    return dictionary
    
    
    
    
# example class/function calls

food = Category("Food")
entertainment = Category("Entertainment")
business = Category("Business")
food.deposit(900, "deposit")
entertainment.deposit(900, "deposit")
business.deposit(900, "deposit")
food.withdraw(105.55)
entertainment.withdraw(33.40)
business.withdraw(10.99)
create_spend_chart([business, food, entertainment])
