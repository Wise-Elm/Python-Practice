import random
import sqlite3


conn = sqlite3.connect('gen.sqlite')
cur = conn.cursor()


def password_generator(a):
    characters = '012345678910123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*!@#$%^&*'
    pas = ''
    for y in range(0, a):
        y = random.choice(characters)
        pas = pas + y
    print(f'Password suggestion: {pas}\n')
    password_save(pas)


def password_save(p):
    saveinp = input('Save password (y/n): ')
    if saveinp == 'y':
        key = input('Enter Key for password: ')
        create_database(key, p)
        saved_passwords[key] = p
        user_choice()
    elif saveinp == 'n':
        user_choice()
    else:
        print('Invalid input')
        password_save(p)


def create_database(id, password):

    cur.execute('CREATE TABLE IF NOT EXISTS Passtest (id TEXT, password TEXT)')
    cur.execute('SELECT id FROM Passtest WHERE id = ?', (id,))
    row = cur.fetchone()
    if row is None:
        cur.execute('INSERT INTO Passtest (id, password) VALUES (?,?)', (id, password))
    else:
        cur.execute('UPDATE Passtest SET password = password WHERE id = ?')
    conn.commit()


def view_passwords():
    try:
        print('ID  -  Password\n')
        sqlstr = 'SELECT id, password FROM Passtest ORDER BY id'
        for row in cur.execute(sqlstr):
            print(str(row[0]), row[1])
        print('\n')
    except:
        print('No saved passwords')
    user_choice()


def weak_password():
    x = random.randint(5, 10)
    return x


def medium_password():
    x = random.randint(10, 15)
    return x


def strong_password():
    x = random.randint(15, 20)
    return x


def user_choice():
    choice = input('Generate new password or View saved passwords (g/v): ')
    if choice.lower().strip() == 'g':
        user = input('Give password length OR select Weak, Medium, or Strong: ')
        user = user.strip().lower()
        try:
            if int(user) in range(1, 100):
                password_generator(int(user))
            else:
                print('Invalid input, pick a number between 5 and 100')
                user_choice()
        except:
            if user == 'weak':
                password_generator(weak_password())
            elif user == 'medium':
                password_generator(medium_password())
            elif user == 'strong':
                password_generator(strong_password())
            else:
                print('Invalid entry')
                user_choice()
    elif choice.lower().strip() == 'v':
        view_passwords()
    else:
        print('Invalid entry\n')
        user_choice()


user_choice()
