import random
import sqlite3


logincheck = ('graham', 'hunter')
# contains initial ID and password for login

conn = sqlite3.connect('graham.sqlite')
cur = conn.cursor()
# opens database


def greeting():
    # First message and question to user
    print('Welcome to Password Manager\n')
    print('Enter 1 for existing account')
    greet = input('--> ')
    if greet == '1':
        verification()
    else:
        print('Invalid selection')
        greeting()


def verification():
    # Asks user for login id and Password and compares them with logincheck = ('graham', 'hunter')
    print('Enter login Id and Password to continue')
    loginid = input('ID: ')
    loginid = loginid.lower().strip()
    loginpass = input('Password: ')
    if loginid in logincheck and loginpass in logincheck:
        menu()
    else:
        print('Invaid Crediantials!')
        verification()


def menu():
    # Displays main menu
    print('\n')
    print('Enter number for selection: ')
    print('1 - View passwords')
    print('2 - Generate a password')
    selection = input('--> ')
    if selection == '1':
        view()
    elif selection == '2':
        choice()
    else:
        print('Invalid Selection')
        menu()


def view():
    # Displays current database of id's and passwords
    try:
        print('ID  -  Password\n')
        sqlstr = 'SELECT id, password FROM Passtest ORDER BY id'
        for row in cur.execute(sqlstr):
            print(str(row[0]), row[1])
        print('\n')
    except:
        print('No saved passwords')
    menu()


def choice():
    # Provides user choices for password generation
    user = input('Give password length OR select w - Weak, m - Medium, or s - Strong: ')
    user = user.strip().lower()
    try:
        if int(user) in range(1, 100):
            generator(int(user))
        else:
            print('Invalid input, pick a number between 5 and 100')
            choice()
    except:
        if user == 'w':
            generator(weak())
        elif user == 'm':
            generator(medium())
        elif user == 's':
            generator(strong())
        else:
            print('Invalid entry')
            choice()


def weak():
    # Generates value for password length between 5 & 10 characters
    x = random.randint(5, 10)
    return x


def medium():
    # Generates value for password length between 10 & 15 characters
    x = random.randint(10, 15)
    return x


def strong():
    # Generates value for password length between 15 & 20 characters
    x = random.randint(15, 20)
    return x


def generator(a):
    # Generates a password based on the length of 'a'
    characters = '012345678910123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*!@#$%^&*'
    pas = ''
    for y in range(0, a):
        y = random.choice(characters)
        pas = pas + y
    print(f'Password suggestion: {pas}\n')
    save(pas)


def save(p):
    # Prompts user to save generated password. If Yes then calls database()
    saveinp = input('Save password (y/n): ')
    if saveinp == 'y':
        key = input('Enter Key for password: ')
        database(key, p)
        menu()
    elif saveinp == 'n':
        menu()
    else:
        print('Invalid input')
        save(p)


def database(id, password):
    # checks for database, creates new database of reads database if one exists.
    # writes in new saved passwords from save()
    cur.execute('CREATE TABLE IF NOT EXISTS Passtest (id TEXT, password TEXT)')
    cur.execute('SELECT id FROM Passtest WHERE id = ?', (id,))
    row = cur.fetchone()
    if row is None:
        cur.execute('INSERT INTO Passtest (id, password) VALUES (?,?)', (id, password))
    else:
        cur.execute('UPDATE Passtest SET password = password WHERE id = ?')
    conn.commit()


greeting()
